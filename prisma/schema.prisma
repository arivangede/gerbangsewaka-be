// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  full_name String
  email     String      @unique
  emailVerified DateTime?
  profile_picture     String?
  phone     String?
  phoneVerified DateTime?
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  userRole     UserRole?
  userToken UserToken[]
  userArea UserAreaAccess[]
}

model UserToken {
  id        String      @id @default(uuid())
  userId    String
  token     String      @unique
  type      UserTokenTypes
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user      User       @relation(fields: [userId], references: [id])
}

enum UserTokenTypes {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     UserRole[]
}

model UserRole {
  id        String      @id @default(uuid())
  userId    String    @unique
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  role      Role       @relation(fields: [roleId], references: [id])
}

model UserAreaAccess {
  id Int @id @default(autoincrement())
  userId String
  districtId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  district District @relation(fields: [districtId], references: [id])
}

model Zone {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  polePoints PolePoint[]
}

model Function{
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  polePoints PolePoint[]
}

model District{
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  polePoints PolePoint[]
  userAccess UserAreaAccess[]
}

model Group {
  id         Int      @id @default(autoincrement())
  code       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  polePoints PolePoint[]
}

model PolePoint {
  id         String      @id @default(uuid())
  type       PolePointType
  streetName String
  poleCode   String
  power      String
  latitude   Float
  longitude  Float

  zoneId     Int
  functionId Int
  districtId Int
  groupId    Int

  zone Zone @relation(fields: [zoneId], references: [id])
  function Function @relation(fields: [functionId], references: [id])
  district District @relation(fields: [districtId], references: [id])
  group Group @relation(fields: [groupId], references: [id])
}

enum PolePointType {
  STREET_LIGHT
  PANEL
}