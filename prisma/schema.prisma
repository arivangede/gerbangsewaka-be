// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  full_name String
  email     String      @unique
  emailVerified DateTime?
  profile_picture     String?
  phone     String?
  phoneVerified DateTime?
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userRole     UserRole?
  userToken UserToken[]
}

model UserToken {
  id        String      @id @default(uuid())
  userId    String
  token     String      @unique
  type      UserTokenTypes
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user      User       @relation(fields: [userId], references: [id])
}

enum UserTokenTypes {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     UserRole[]
}

model UserRole {
  id        String      @id @default(uuid())
  userId    String    @unique
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  role      Role       @relation(fields: [roleId], references: [id])
}

model Area{
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  streetLightGroup StreetLightGroup[]
}

model RoadFunction{
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  streetLight StreetLight[]
}

model StreetLight {
  id         Int      @id @default(autoincrement())
  name        String
  latitude   Float
  longitude  Float
  roadfunction_id Int
  group_id      Int?
  poleType   String?
  poleHeight String?
  poleMaterial String?
  status     StreetLightStatus
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  streetLightAccessory StreetLightAccessory[]
  lamp       Lamp[]
  roadFunction RoadFunction @relation(fields: [roadfunction_id], references: [id])
  streetLightGroup StreetLightGroup? @relation(fields: [group_id], references: [id])
}

enum StreetLightStatus {
  Active
  Inactive
  UnderMaintenance
}

model StreetLightGroup {
  id       Int      @id @default(autoincrement())
  name      String
  area_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  streetLight StreetLight[]
  area     Area @relation(fields: [area_id], references: [id])
}

model Lamp{
  id Int @id @default(autoincrement())
  streetlighting_id Int
  brand String
  type String
  power String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  streetLight StreetLight @relation(fields: [streetlighting_id], references: [id])
}

model StreetLightAccessory {
  id Int @id @default(autoincrement())
  name String
  streetlighting_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  streetLight StreetLight @relation(fields: [streetlighting_id], references: [id])
}
